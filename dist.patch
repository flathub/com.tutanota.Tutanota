diff --git a/buildSrc/DesktopBuilder.js b/buildSrc/DesktopBuilder.js
index 8e37fb5aa..e6dcdfe6e 100644
--- a/buildSrc/DesktopBuilder.js
+++ b/buildSrc/DesktopBuilder.js
@@ -85,11 +85,9 @@ function build(opts) {
 				)
 			)
 		}).then(() => Promise.all([
-			fs.removeAsync(path.join(distDir, '/installers/')),
 			fs.removeAsync(path.join(distDir, '/node_modules/')),
 			fs.removeAsync(path.join(distDir, '/cache.json')),
 			fs.removeAsync(path.join(distDir, '/package.json')),
-			fs.removeAsync(path.join(distDir, '/package-lock.json')),
 			fs.removeAsync(path.join(distDir, '/src/')),
 		]))
 }
diff --git a/buildSrc/electron-package-json-template.js b/buildSrc/electron-package-json-template.js
index dc26c7a49..b9313d00b 100644
--- a/buildSrc/electron-package-json-template.js
+++ b/buildSrc/electron-package-json-template.js
@@ -72,6 +72,7 @@ module.exports = function (opts) {
 			"keytar": pj.dependencies.keytar
 		},
 		"build": {
+                        "npmArgs": ["--cache=/run/build/tutanota/npm-cache"],
 			"electronVersion": pj.devDependencies.electron,
 			"icon": iconPath,
 			"appId": "de.tutao.tutanota" + nameSuffix,
@@ -117,8 +118,8 @@ module.exports = function (opts) {
 					: undefined,
 				"target": [
 					{
-						"target": unpacked ? "dir" : "nsis",
-						"arch": "x64"
+						"target": "dir",
+						"arch": (process.arch == "arm")?"armv7l":process.arch
 					}
 				]
 			},
diff --git a/dist.js b/dist.js
index be34fb6fa..3906d3f3a 100644
--- a/dist.js
+++ b/dist.js
@@ -101,8 +101,7 @@ function measure() {
 }
 
 function clean() {
-	return fs.removeAsync("build")
-	         .then(() => fs.ensureDirAsync(DistDir + "/translations"))
+	return fs.ensureDirAsync(DistDir + "/translations")
 }
 
 function buildWebapp() {
@@ -209,8 +208,6 @@ function buildDesktopClient() {
 					// Do not notarize test build
 					notarize: false
 				})
-				buildPromise.then(() => createHtml(env.create(SystemConfig.distRuntimeConfig(bundles), "https://test.tutanota.com", version, "Desktop", true), bundles))
-				            .then(() => desktopBuilder.build(desktopTestOpts))
 			}
 			return buildPromise
 		} else if (options.stage === "local") {
